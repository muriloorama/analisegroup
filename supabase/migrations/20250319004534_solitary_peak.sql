/*
  # Create broadcast analysis group table

  1. New Tables
    - `broad_analise_group`
      - `id` (bigint, primary key)
      - `name` (text, not null) - Name of the broadcast group
      - `description` (text) - Description of the broadcast group
      - `template` (text) - Message template for broadcasts
      - `created_at` (timestamptz, default now()) - Creation timestamp
      - `updated_at` (timestamptz, default now()) - Last update timestamp
  
  2. Security
    - Enable RLS on `broad_analise_group` table
    - Add policies for authenticated users to perform CRUD operations
*/

-- Create the broad_analise_group table
CREATE TABLE IF NOT EXISTS broad_analise_group (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  description text,
  template text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE broad_analise_group ENABLE ROW LEVEL SECURITY;

-- Create policies for authenticated users
CREATE POLICY "Allow all operations for authenticated users"
  ON broad_analise_group
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

-- Create a function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to call the function
CREATE TRIGGER update_broad_analise_group_updated_at
BEFORE UPDATE ON broad_analise_group
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();